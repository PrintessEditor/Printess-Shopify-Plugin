{% comment %}
  Renders the printess edit button inside the cart.
  Version 2.6

  Accepts:
  - item: {Object} cart line item.
  - classes: {String} classes to use for styling.
  - label: {String} the label that should be used for the edit button.
  - shopToken: {String} Your printess shop token.
  - startupLogoUrl: {String} Url for the startup logo of the editor that should be displayed on load (requires premium account),
  - showStartupAnimation: {Boolean} The stars startup animation should be displayed.
  - hidePricesInEditor: {Boolean} The editor should display product prices.
  - editorVersion: {String} The editor version that should be loaded "" for release; "/v/nightly" for dev.
  - legalText: {String} The legal text that should be displayed inside the editor together with the price.
  - theme: {String} The theme the editor should be loaded with.
  - showProductName: {Boolean} If set to false, the editor will not display the product name.
  - showAlertOnTabClose: {Boolean} If set to true, a warning is shown in case the editor is open and someone closes the current tab.
  - startupBackgroundColor: {String} The background color for the startup screen
  - showSplitterGridSizeButton: {Boolean} Set to false to hide the Gridsize Button
  - additionalAttachParams: {Object} Additional startup params
  - duplicateAndPersonalizeText: {String} Will show a duplicate & personalize link that enables the customer to open the current basket item, modify it and add it as a second
  - graphQlToken: {String}: The App Access Token for the Graphql Api
  - forceCartItemCleanup: {Boolean}: Forces the cleanup of cart items that have noot been deleted correctly due to other scripts
  - quantitySelector: {String} A selector that selets the html child node that represents the quantitry selector so that the quantity selector can be hidden for circulation vdp products
  - cartItemParentSelector: {String} A selector that selets the html parent node that represents the cart item html node so that the quantity selector can be searched and hidden for circulation vdp products
  - circulationTableRecordCountText: {String} The text that should be placed instead of the quantity selector. The text {NUMBER} will be replaced by the printed record count
  - basketId: { String } The current session id (Must be unique between different shop users, is auto generated if not provided)
  - shopUserId: { String } The current logged in user id, must be unique over all shop users
  - autoImportUserImages: { Boolean } Autoimports all images that have been uploaded by the current user
  - graphQlLanguage: { String } The language that should be used to get product option names and values
  Usage:
  {% render 'printess-cart-edit-button',
    item: item,
    classes: 'button_class_1 etc',
    label: 'Edit',
    shopToken: "",
    startupLogoUrl: "",
    showStartupAnimation: true,
    hidePricesInEditor: false,
    editorVersion: "/v/nightly",
    legalText: "incl. tax, excl. shipping",
    theme: "theme01",
    showProductName: true,
    showAlertOnTabClose: true,
    startupBackgroundColor: "#000000",
    showSplitterGridSizeButton: false,
    additionalAttachParams: {},
    duplicateAndPersonalizeText: "",
    graphQlToken: "",
    forceCartItemCleanup: false,
    quantitySelector: "",
    cartItemParentSelector: "",
    circulationTableRecordCountText: "{NUMBER} Records",
    graphQlLanguage: "auto"
  %}
{% endcomment %}

{%  if item.properties._printessSaveToken != blank %}
<script id="printess_script_{{ item.key | replace: "-", "_" | replace: ":", "_" }}">
  function getPrintessEditor() {
    if(!getPrintessEditor.editor) {
      getPrintessEditor.editor = new PrintessShopifyCart({ displayProductName: !({{showProductName | json}} === false),
                                                                                                                shopToken: "{{ shopToken }}",
                                                                                                                "startupLogoUrl": "{{ startupLogoUrl }}",
                                                                                                                "showStartupAnimation": {{ showStartupAnimation }},
                                                                                                                "hidePricesInEditor": {{ hidePricesInEditor }},
                                                                                                                shopMoneyFormat: "{{ shop.money_format }}",
                                                                                                                "editorVersion": {{ editorVersion | json }},
                                                                                                                "showAlertOnTabClose": {{showAlertOnTabClose | json}} === true,
                                                                                                                "startupBackgroundColor": "{{startupBackgroundColor}}" || "#000000",
                                                                                                                "graphQlToken": {{graphQlToken | json}} || "",
                                                                                                                "basketId": {% if basketId != blank %}{{ basketId | json }}{% else %}null{% endif %},
                                                                                                                "shopUserId": {% if shopUserId != blank %}{{ shopUserId | json }}{% else %}null{% endif %},
                                                                                                                "autoImportUserImages": {{ autoImportUserImages | json }} === true,
                                                                                                                "graphQlLanguage": {% if graphQlLanguage != blank %} {% if graphQlLanguage == 'auto' %}{{ localization.language.iso_code | json }}{%else%}{{ graphQlLanguage | json}}{%endif%}{% else %}null{%endif%}
                                                                                                              });
    }

    return getPrintessEditor.editor;
  }

  function openPrintessEditor{{ item.key | replace: "-", "_" | replace: ":", "_" }}(keepOriginalBasketItem = false) {
    const basketItem = {{ item | json }};
    const basketItemProperties = {{item.properties | json}};

    if(basketItemProperties) {
      basketItem.properties = {};
      basketItemProperties.forEach((prop) => {
        if(prop.length > 1) {
          basketItem.properties[prop[0]] = prop[1];
        } else {
          basketItem.properties[prop[0]] = "";
        }
      });
    }

    if(basketItem.options_with_values) {
      basketItem.options_with_values.forEach((x) => {
        basketItem.properties[x.name] = x.value;
      });
    }

    const editor = getPrintessEditor();

    if(!editor) {
      return;
    }

    let attachParams = null;

    try {attachParams = JSON.parse({{ additionalAttachParams | json }});}catch(e){}

    const settings = {
      basketItemId: {{ item.key | json }},
      basketItemOptions: basketItem.properties,
      productId: basketItem.product_id,
      quantity: basketItem.quantity,
      legalText: {% if legalText != blank %}{{ legalText | json }}{% else %}""{% endif %},
      theme: {% if theme != blank %}"{{ theme }}"{% else %}""{%endif%},
      additionalAttachParams: attachParams,
      keepOriginalBasketItem: keepOriginalBasketItem,
      displayProductName: !({{showProductName | json}} === false),
      /*,onAddToBasket: function(saveToken, thumbnailUrl) {

        },

        onSave: function(saveToken, thumbnailUrl) {

      }*/
    };

    {% if showSplitterGridSizeButton != null %}settings["showSplitterGridSizeButton"] = {{showSplitterGridSizeButton | json}};{% endif %}

    editor.show(settings);
  }

  setTimeout(function() {
    const properties = {};
    const basketItemProperties = {{item.properties | json}};

    if(basketItemProperties) {
      basketItemProperties.forEach((prop) => {
        if(prop.length > 1) {
          properties[prop[0]] = prop[1];
        } else {
          properties[prop[0]] = "";
        }
      });
    }

    PrintessShopifyCart.initCirculationCartItem({{ cartItemParentSelector | json }}, {{ quantitySelector | json }}, {{ item.key | replace: "-", "_" | replace: ":", "_"  | json }}, properties, {{ circulationTableRecordCountText | json }});
  }, 10);
</script>

{% if template == 'cart' and forceCartItemCleanup == true %}
<script>
  const initCleanup{{ item.key | replace: "-", "_" | replace: ":", "_" }} = function (retries = 0) {
    if(typeof PrintessShopifyCart !== "undefined") {
      PrintessShopifyCart.deleteUndeletedBasketItem().then(() => {

      });
    } else {
      if(retries < 20)
        setTimeout(function() {
          initCleanup{{ item.key | replace: "-", "_" | replace: ":", "_" }}(retries + 1);
        }, 100);
    }
  };

  addEventListener("DOMContentLoaded", function() {
    initCleanup{{ item.key | replace: "-", "_" | replace: ":", "_" }}();
  });
</script>
{% endif %}

{% if item.properties._printessDisableEditing == blank %}
<span style="margin-top: 20px;" onclick='showPrintessEditorFallback("{{ item.key | replace: "-", "_" | replace: ":", "_" }}", 0)' id="printessCustomizeButton{{ item.key | replace: "-", "_" | replace: ":", "_" }}" class="{{ classes }}">{{ label | escape }}</span>

  {% if duplicateAndPersonalizeText != blank %}
    <span style="margin-top: 20px;" onclick='showPrintessEditorFallback("{{ item.key | replace: "-", "_" | replace: ":", "_" }}", 0, true)' id="printessDuplicateButton{{ item.key | replace: "-", "_" | replace: ":", "_" }}" class="{{ classes }}">{{ duplicateAndPersonalizeText | escape }}</span>
  {% endif %}
{% endif %}
{%  endif %}